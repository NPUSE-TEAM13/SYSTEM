<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    
	<!-- 自动扫描(dao和service还有pojo) -->
	<context:component-scan base-package="com.nwpu.dao,com.nwpu.service.impl,com.nwpu.serviceImpl" />
	
	<!-- 1.引入配置文件:加载配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	
	<!-- 2.配置数据源 -->
	<!-- mysql和连接池的配置(基本属性 driver,url,username,password) 初始化连接池中的连接数,最小连接数,最大连接数, -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" p:driverClassName="${jdbc.driver}" p:url="${jdbc.url}"
		p:username="${jdbc.username}" p:password="${jdbc.password}" />
	
	<!-- 3.spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:configLocation="classpath:mybatis-config.xml"
		p:mapperLocations="classpath:mapper/*.xml">
	</bean>
	
	<!-- 4.DAO接口所在包名,Spring会自动查找其下的类,MapperScannerConfigurer 支 持 过 滤 由 指 定 的 
		创 建 接 口 或 注 解 创 建 映 射 器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.nwpu.dao"
		p:sqlSessionFactoryBeanName="sqlSessionFactory" />
	
	<!-- 5.数据事务管理 :在dao层可以使用@Trantional注解管理事务（ Spring允许允许 MyBatis参与到事务管理中，所以MyBatis没有特定的事务管理器， 
		直接利用了Spring中的 DataSourceTransactionManager） -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	
	<!-- 6.使用声明式事务 ：引用上面的配置管理器(base-package是server的包名：@Service) -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 7.AOP -->
	<!-- AOP注解代理 -->
	<aop:aspectj-autoproxy/>
</beans>
